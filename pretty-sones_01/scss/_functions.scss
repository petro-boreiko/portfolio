// calculate clamp for adaptive size
// Адаптивна властивість: CSS-властивість, початкове значення, кінцеве значення, ширина початкова, ширина кінцева (використовується clamp())
// За замовчуванням ширина viewport-а: (максимальна 1400), (мінімальна 320)
@function calculate-clamp(
   $maxSize,
   $minSize,
   $maxWidth: $containerWidth,
   $minWidth: $minWidth
) {
   // convert to rem
   // Конвертація значень в rem
   $minSize: math.div($minSize, 16);
   $maxSize: math.div($maxSize, 16);
   $maxWidth: math.div($maxWidth, 16);
   $minWidth: math.div($minWidth, 16);

   // do calculations
   // Розрахунки для адаптивного розміру
   $slope: math.div(($maxSize - $minSize), ($maxWidth - $minWidth));
   $yAxisIntersection: -$minWidth * $slope + $minSize;
   $preferredValue: (#{$yAxisIntersection * 1rem}) "+ " + (#{$slope * 100vw});

   // output as rem
   // Вивід результатів у вигляді rem
   $minSize: $minSize * 1rem;
   $maxSize: $maxSize * 1rem;

   // Використання clamp для адаптивного обмеження
   @return clamp(#{$minSize}, #{$preferredValue}, #{$maxSize});
}
// Викликаємо сніпет calculate clamp default
// За допомогою комбінації послідовного введення символів ccd у SCSS отримуємо код
// font-size: calculate-clamp(16, 12);
// Це означає, що початковий розмір шрифту дорівнюватиме 16px, коли viewport буде 1400 і вище, і 12px, коли досягне viewport-а 320.

// Якщо потрібно розрахувати значення для іншого діапазону viewport-а, наприклад, від 1000 до 320, то комбінацією символів ccf,
// викликаємо сніппет calculate clamp full (або через кому дописуємо необхідні значення):
// / За допомогою комбінації послідовного введення символів ccf отримуємо розгорнутий запис calculate-clamp
// font-size: calculate-clamp(50, 30, 1000, 320);

@function lineHeight($num1, $num2) {
   $rez: math.div($num1, $num2);
   @return $rez;
}
@function percent($num1, $num2) {
   $rez: math.div($num1, $num2) * 100%;
   @return $rez;
}

@function toRem($num1, $num2: 16) {
   $rez: math.div($num1, $num2) + rem;
   @return $rez;
}
@function toEm($num1, $num2: 16) {
   $rez: math.div($num1, $num2) + em;
   @return $rez;
}

// Адаптивна властивість (clamp)
@mixin adaptiveValue(
   $property,
   $startSize,
   $minSize,
   $keepSize: 0,
   $widthFrom: $containerWidth,
   $widthTo: $minWidth
) {
   @if ($startSize==0) {
      $startSize: 0.000001;
   }
   @if ($minSize==0) {
      $minSize: 0.000001;
   }

   // Для calc();
   $addSize: math.div($startSize - $minSize, 16);

   @if ($widthFrom == $containerWidth and $maxWidthContainer == 0) {
      $widthFrom: $maxWidth;
   }

   // Брейк-поїнти в EM
   $widthFromMedia: toEm($widthFrom);
   $widthToMedia: toEm($widthTo);

   // Формула плаваючого значення
   // Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
   $slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
   $yIntersection: -$widthTo * $slope + $minSize;
   @if ($yIntersection==0) {
      $yIntersection: 0.000001;
   }
   $flyValue: #{toRem($yIntersection)}" + " #{$slope * 100}vw;

   // Отримання значення властивості
   $propertyValue: #{"clamp(" toRem($minSize) "," $flyValue ","
      toRem($startSize) ")"};
   // Якщо негативні значення
   @if ($minSize > $startSize) {
      $propertyValue: #{"clamp("
         toRem($startSize)
         ","
         $flyValue
         ","
         toRem($minSize)
         ")"};
   }

   // Встановлюємо значення за замовчуванням
   @if $keepSize != 1 and $keepSize != 3 {
      @media (min-width: $widthFromMedia) {
         #{$property}: toRem($startSize);
      }
   }
   // Адаптуємо розмір у проміжку між зазначеними ширинами в'юпорту
   @media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
      // Якщо підтримується clamp();
      @supports (#{$property}: $propertyValue) {
         #{$property}: $propertyValue;
      }
      // Якщо не підтримується clamp();
      @supports not (#{$property}: $propertyValue) {
         #{$property}: calc(
            #{toRem($minSize)} + #{$addSize} * (100vw - #{toRem($widthTo)}) / #{math.div(
                  $widthFrom,
                  16
               ) - math.div($widthTo, 16)}
         );
      }
   }
   @if $keepSize != 1 and $keepSize != 2 {
      @media (max-width: $widthToMedia) {
         #{$property}: toRem($minSize);
      }
   }
}

// .....
